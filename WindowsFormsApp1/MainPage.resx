<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label2.Text" xml:space="preserve">
    <value>Η ταχύτατη εξέλιξη των υπολογιστών, που σηματοδοτείται από αυξημένη υπολογιστική ισχύ, αυξημένη χωρητικότητα μνήμης και εξειδικευμένες περιφερειακές συσκευές, έχει επιτρέψει τη διάδοση προηγμένων και απαιτητικών προγραμματιστικών τεχνικών, ακόμα και σε επίπεδο προσωπικού υπολογιστή. Οι τεχνικές αυτές θεραπεύονται από τα επιστημονικά πεδία της Τεχνολογίας Λογισμικού, των Γραφικών και της Εικονικής Πραγματικότητας, της Τεχνητής Νοημοσύνης και των Ευφυών Συστημάτων, της Αναγνώρισης Προτύπων και Μηχανικής Μάθησης, Πολυμέσων καθώς και από τις πλέον προηγμένες τεχνικές Επικοινωνίας Ανθρώπου-Υπολογιστή. Η κατεύθυνση αυτή φιλοδοξεί να προσφέρει στους προπτυχιακούς φοιτητές αφ’ ενός το απαραίτητο υπόβαθρο, αφ’ ετέρου τις ιδιαίτερες τεχνικές γνώσεις ώστε να μπορούν να ανταποκριθούν αναπτυξιακά και ερευνητικά στην ευρύτερη περιοχή των σύγχρονων και προηγμένων τεχνικών ανάπτυξης λογισμικού.</value>
  </data>
  <data name="label27.Text" xml:space="preserve">
    <value>1. Καλές επικοινωνιακές δεξιότητες: Η ικανότητα να επικοινωνείτε αποτελεσματικά με άλλους
προγραμματιστές, μηχανικούς και πελάτες είναι κρίσιμη για την αποτελεσματική συνεργασία και την
επίλυση προβλημάτων.
2. Ομαδικό πνεύμα: Η ικανότητα να εργάζεστε σε ομάδα και να συνεισφέρετε στο κοινό στόχο είναι
σημαντική για την επιτυχημένη ανάπτυξη λογισμικού.
3. Προσαρμοστικότητα: Η ικανότητα να προσαρμόζεστε σε νέες τεχνολογίες
4. Κριτική σκέψη: Η ικανότητα να αξιολογείτε και να αναλύετε κριτικά προβλήματα και καταστάσεις βοηθά
στη λήψη ορθών αποφάσεων και τη βελτίωση του λογισμικού.
5. Διαχείριση χρόνου: Η ικανότητα να οργανώνετε και να διαχειρίζεστε αποτελεσματικά τον χρόνο σας
είναι σημαντική για την εκπλήρωση προθεσμιών και την αποτελεσματική παράδοση των έργων.
6. Επίλυση προβλημάτων: Η ικανότητα να αναγνωρίζετε προβλήματα και να βρίσκετε καινοτόμες λύσεις
είναι ουσιώδης για την ανάπτυξη υψηλής ποιότητας λογισμικού.
7. Ηθική: Η συνειδητοποίηση των ηθικών προκλήσεων και η δεοντολογική συμπεριφορά είναι σημαντικές
για τη διασφάλιση της ασφάλειας και της ιδιωτικότητας των χρηστών.
8. Διαπροσωπικές δεξιότητες: Η ικανότητα να αλληλεπιδράτε με άλλους ανθρώπους, να επικοινωνείτε
αποτελεσματικά και να εργάζεστε σε ομάδα </value>
  </data>
  <data name="label43.Text" xml:space="preserve">
    <value>Όπως σε όλους τους τομείς, έτσι και στην τομέα της πληροφορικής απαιτούνται κάποιες δεξιότητες.Πιο συγκεκριμένα, παρακάτω παρουσιάζεται μία λίστα από softskills και hardskills τα οποία
καλό θα ήταν να τα διαθέτει ένας φοιτητής πληροφορικής κατά την αποφοίτησή του από το τμήμα, εφόσον βέβαια έχει επαγγελματικές αξιώσεις. 
Είναι σημαντικό να σημειωθεί ότι η λίστα αυτή δεν είναι απολύτως πλήρης και οι απαιτούμενες δεξιότητες μπορεί να διαφέρουν ανάλογα με την ειδικότητα και τη θέση εργασίας στον τομέα της πληροφορικής.</value>
  </data>
  <data name="label29.Text" xml:space="preserve">
    <value>1. Γνώση προγραμματισμού: Καλή κατανόηση και εμπειρία σε γλώσσες προγραμματισμού, όπως Python, Java, C++, που
χρησιμοποιούνται για την ανάπτυξη λογισμικού Τεχνητής Νοημοσύνης.
2. Αναγνώριση Προτύπων και Μηχανική Μάθηση: Κατανόηση των αλγορίθμων μηχανικής μάθησης και της σχετικής θεωρίας για
την ανάπτυξη μοντέλων μηχανικής μάθησης και αναλύσεων δεδομένων.
3. UML ( Γλώσσα Μοντελοποίησης): Κατανόηση και εμπειρία στη χρήση της UML για την καταγραφή, τον σχεδιασμό και την
ανάπτυξη λογισμικών συστημάτων. Η UML παρέχει κοινή γλώσσα και γραφικά εργαλεία για την ανάπτυξη και τον σχεδιασμό
συστημάτων.
4. UX Design (Σχεδιασμός Χρήσης): Κατανόηση των αρχών σχεδιασμού χρήσης και της διαδικασίας σχεδίασης ευχάριστων και
ευαίσθητων στον χρήστη διεπαφών. Αυτό περιλαμβάνει την κατανόηση των αναγκών των χρηστών, τη δημιουργία
πρωτοτύπων (prototypes) και την αξιολόγηση της χρηστικότητας του λογισμικού.
5. Ανάλυση και σχεδιασμός Λογισμικού: Κατανόηση και εμπειρία στην ανάλυση απαιτήσεων λογισμικού και τον σχεδιασμό
λογισμικών αρχιτεκτονικών. Αυτό περιλαμβάνει την αναγνώριση τσυστατικών του συστήματος, τον σχεδιασμό των λειτουργιών
και των διεπαφών του λογισμικού, καθώς και τον καθορισμό των δομικών και λειτουργικών απαιτήσεων. Η ανάλυση και
σχεδιασμός λογισμικού είναι σημαντικές δεξιότητες για την κατανόηση και την ανάπτυξη ποιοτικού και αποτελεσματικού
λογισμικού.
6. Ανάλυση δεδομένων: Κατανόηση των αλγορίθμων ανάλυσης δεδομένων και εξόρυξης πληροφορίας για την αντιμετώπιση
μεγάλων όγκων δεδομένων και την εξαγωγή συμπερασμάτων.
7. Νευρωνικά Δίκτυα: Κατανόηση των αρχών και των αλγορίθμων που βασίζονται σε νευρωνικά δίκτυα, όπως τα συνελικτικά
νευρωνικά δίκτυα και τα αναδρομικά νευρωνικά δίκτυα.
8. Επεξεργασία Φυσικής Γλώσσας : Κατανόηση τεχνικών επεξεργασίας φυσικής γλώσσας</value>
  </data>
  <data name="label11.Text" xml:space="preserve">
    <value>1. Προγραμματιστικές δεξιότητες: Οι μηχανικοί ενδυνάμωσης λογισμικού χρειάζεται να είναι ικανοί προγραμματιστές με εμπειρία σε γλώσσες προγραμματισμού όπως Python,
Java, C++, ή R. Πρέπει να μπορούν να υλοποιούν αλγορίθμους μηχανικής μάθησης, νευρωνικά δίκτυα και άλλες τεχνικές τεχνητής νοημοσύνης.
2. Γνώση της Τεχνητής Νοημοσύνης: Οι μηχανικοί ενδυνάμωσης λογισμικού με τεχνητή νοημοσύνη πρέπει να έχουν βαθιά κατανόηση των θεμελιωδών αρχών, μεθόδων και αλγορίθμων
της τεχνητής νοημοσύνης, όπως μηχανική μάθηση,βαθιά μάθηση, νευρωνικά δίκτυα, αναγνώριση προτύπων, εκτίμηση και ενσωμάτωση της νοημοσύνης σε λογισμικά.
3. Δεδομενοκεντρικές δεξιότητες: Οι μηχανικοί ενδυνάμωσης λογισμικού με τεχνητή νοημοσύνη πρέπει να είναι ικανοί να διαχειρίζονται και να αναλύουν μεγάλους όγκους δεδομένων. 
Αυτό περιλαμβάνει τη συλλογή, τον καθαρισμό, την προεπεξεργασία και την ανάλυση δεδομένων για την εκπαίδευση και αξιολόγηση μοντέλων μηχανικής μάθησης.
4. Κατανόηση των εφαρμογών: Οι μηχανικοί ενδυνάμωσης λογισμικού πρέπει να έχουν κατανόησητης Τεχνολογίας Λογισμικού και των εφαρμογών της τεχνητής νοημοσύνης σε διάφορους τομείς, 
όπως η εικόνα και ο ήχος, η επεξεργασία φυσικής γλώσσας, η αυτόνομη πλοήγηση, η αυτοματοποίηση και πολλά άλλα. Πρέπει να μπορούν να εφαρμόσουν τεχνικές τεχνητής νοημοσύνης
για την επίλυση πρακτικών προβλημάτων.</value>
  </data>
  <data name="label8.Text" xml:space="preserve">
    <value>• Το επάγγελμα των Μηχανικών Ενδυνάμωσης Λογισμικού με Τεχνητή Νοημοσύνη θεωρείται ένα από τα πιο ανεπτυγμένα και αναπτυσσόμενα πεδία στον τομέα της
τεχνολογίας και του λογισμικού. Η Τεχνητή Νοημοσύνη αποκτά όλο και μεγαλύτερη σημασία σε πολλούς τομείς, όπως η ρομποτική, η αυτοματοποίηση, η ιατρική, η
αυτόνομη οδήγηση, η ανάλυση δεδομένων και άλλοι. Λόγω της αυξανόμενης ζήτησης για εξειδικευμένους μηχανικούς ενδυνάμωσης λογισμικού με τεχνητή νοημοσύνη, το
επάγγελμα αυτό προσφέρει πολλές ευκαιρίες για μελλοντική απασχόληση και επαγγελματική ανάπτυξη. Οι τεχνολογικές εξελίξεις στον τομέα της τεχνητής νοημοσύνης
δημιουργούν συνεχώς νέες προκλήσεις και ευκαιρίες για τους επαγγελματίες αυτού του πεδίου.</value>
  </data>
  <data name="label9.Text" xml:space="preserve">
    <value>1. Γνώσεις προγραμματισμού: Απαιτείται εξοικείωση με τουλάχιστον ένα ή περισσότερα γλώσσες προγραμματισμού, όπως Java, C++, Python, JavaScript, κ.λπ. 
Οι μηχανικοί λογισμικού πρέπει να έχουν βαθιά κατανόηση των αλγορίθμων, των δομών δεδομένων και των αρχών της λογικής προγραμματισμού.
2. Σχεδίαση και αρχιτεκτονική λογισμικού: Οι μηχανικοί λογισμικού πρέπει να είναι εξοικειωμένοι με τις αρχές και τις πρακτικές ανάλυσης και σχεδίασης
λογισμικού (π.χ. UML) και να μπορούν να δημιουργήσουν αρχιτεκτονικές λογισμικού που είναι αποτελεσματικές, επεκτάσιμες και ευέλικτες.
3. Εμπειρία στον τομέα: Συχνά απαιτείται να έχουν προηγούμενη εμπειρία εργασίας σε αντίστοιχες θέσεις ή σε σχετικά έργα.</value>
  </data>
  <data name="label17.Text" xml:space="preserve">
    <value>1. Γνώσεις προγραμματισμού: Απαιτείται εξοικείωση με τουλάχιστον ένα ή περισσότερα γλώσσες προγραμματισμού, όπως Java, C++, Python, JavaScript, κ.λπ. 
Οι προγραμματιστές πρέπει να έχουν καλή κατανόηση των αλγορίθμων και των δομών δεδομένων.
2. Σχεδίαση και αρχιτεκτονική λογισμικού: Οι μηχανικοί λογισμικού πρέπει να είναι εξοικειωμένοι με τις αρχές και τις πρακτικές σχεδίασης λογισμικού (π.χ.UML) 
και να μπορούν να δημιουργήσουν αρχιτεκτονικές λογισμικού που είναι αποτελεσματικές, επεκτάσιμες και ευέλικτες.
3. Ανάπτυξη λογισμικού και προγραμματιστικά εργαλεία: Απαιτείται ικανότητα στην ανάπτυξη λογισμικού με χρήση πλατφορμών και εργαλείων ανάπτυξης 
όπως IDEs (περιβάλλοντα ανάπτυξης εφαρμογών)
4. Εμπειρία στον τομέα: Συχνά απαιτείται να έχουν προηγούμενη εμπειρία εργασίας σε αντίστοιχες θέσεις ή σε σχετικά έργα λογισμικού. 
Οι εργοδότες μπορεί να απαιτούν συγκεκριμένα χρόνια εμπειρίας.</value>
  </data>
  <data name="label14.Text" xml:space="preserve">
    <value>Η ταχύτατη εξέλιξη των υπολογιστών, που σηματοδοτείται από αυξημένη υπολογιστική ισχύ, αυξημένη χωρητικότητα μνήμης και εξειδικευμένες περιφερειακές συσκευές, έχει επιτρέψει τη διάδοση προηγμένων και απαιτητικών προγραμματιστικών τεχνικών, ακόμα και σε επίπεδο προσωπικού υπολογιστή. Οι τεχνικές αυτές θεραπεύονται από τα επιστημονικά πεδία της Τεχνολογίας</value>
  </data>
  <data name="label74.Text" xml:space="preserve">
    <value>Μαθησιακά αποτελέσματα: 

Με την επιτυχή ολοκλήρωση αυτού του μαθήματος ο φοιτητής θα είναι σε θέση:
1. Να αναλύει και να συγκρίνει μοντέλα ανάπτυξης λογισμικού
2. Να επιλέγει μοντέλα ανάπτυξης λογισμικού ανάλογα με τις ανάγκες και να τα χρησιμοποιεί
3. Να αξιοποιεί το εργαλείο Android Studio για την ανάπτυξη κινητών εφαρμογών
4. Να αναπτύσσει native mobile apps κάνοντας χρήση του Android SDK
5. Να εκμεταλλεύεται τοπικές (SQLite) βάσεις δεδομένων
6. Να γνωρίζει τις πλέον σύγχρονες υπηρεσίες Cloud και Mobile backend as a service που παρέχει
η Firebase
7. Να τις χρησιμοποιεί πρακτικά
8. Να σχεδιάζει και να αναπτύσσει εφαρμογές για κινητές και φορητές συσκευές υλοποιώντας τις
πλέον σύγχρονες τεχνικές προγραμματισμού
9. Να διασφαλίζει την αποτελεσματικότητα των λογισμικών μέσω των προαναφερθέντων εφαρμογών</value>
  </data>
  <data name="label75.Text" xml:space="preserve">
    <value>Περιεχόμενο μαθήματος : 

1) Μοντέλα ανάπτυξης λογισμικού,
2) Δομημένη Ανάλυση και Αντικειμενοστρεφής Ανάλυση,
3) Αρχιτεκτονικός σχεδιασμός, λεπτομερής σχεδιασμός, Δομημένος και Αντικειμενοστρεφής σχεδιασμός.
4) Ανάπτυξη εφαρμογών οι οποίες μπορούν να εκτελεστούν από σύγχρονες κινητές συσκευές
(smartphones) με ενσωματωμένο λειτουργικό σύστημα. Οι εφαρμογές αυτές δύναται να λειτουργήσουν τόσο στα σύγχρονα «έξυπνα» τηλέφωνα "smartphones", όσο και σε άλλες «κινητές» συσκευές, οι οποίες έχουν κάνει την εμφάνισή τους τα τελευταία χρόνια και χρησιμοποιούν λειτουργικό σύστημα (Tablets, Wearables).
Στο μάθημα αναλύονται περιληπτικά τα δημοφιλέστερα λειτουργικά συστήματα κινητών συσκευών,
καθώς και τα εργαλεία ανάπτυξης εφαρμογών σε αυτά, ωστόσο η ύλη περιλαμβάνει κυρίως τη χρήση της αντικειμενοστρεφούς γλώσσας προγραμματισμού Java, για την ανάπτυξη εφαρμογών σε κινητές συσκευές υπό το λειτουργικό σύστημα Android. Ενδεικτικά, η ανάπτυξη των mobile apps υλοποιείται με τη χρήση του περιβάλλοντος ανάπτυξης λογισμικού Android Studio.
Επιπλέον το μάθημα καλύπτει και την ύλη που αφορά στους αισθητήρες των κινητών συσκευών,
στις υπηρεσίες γεοεντοπισμού και σε πλήθος άλλων προχωρημένων τεχνικών προγραμματισμού
(asynchronous programming, android services, broadcast receivers, android intents).</value>
  </data>
  <data name="label73.Text" xml:space="preserve">
    <value>Μαθησιακά αποτελέσματα: 

Μετά την επιτυχή ολοκλήρωση του μαθήματος, οι φοιτητές θα είναι σε θέση
• Να προσδιορίσουν και να διακρίνουν τις βασικές αρχές της επιστήμης των υπολογιστών
μέσω της γλώσσας προγραμματισμού Python
• Να γράφουν (να δημιουργούν, να συνθέτουν) προγράμματα (απλά ή σύνθετα)
• Να μετρούν, να ελέγχουν και να αξιολογούν την ορθότητα και την καταλληλότητα ενός
προγράμματος.
• Να εκσφαλματώνουν προγράμματα.
• Να γνωρίζουν, να επιλέγουν, να διακρίνουν, να ερμηνεύουν, να συνδυάζουν βασικές
προγραμματιστικές έννοιες, δομές και τεχνικές.
• Να εκτελούν απλούς και σύνθετους αριθμητικούς υπολογισμούς μέσω του
προγραμματισμού.
• Να χρησιμοποιούν δομές ελέγχου, συνθήκες, δομές απόφασης και δομές επανάληψηςβρόχους.
• Να δομούν τα προγράμματά τους με χρήση επαναληπτικών και αναδρομικών
συναρτήσεων.
• Να διακρίνουν, να εκτιμήσουν και να κατανοήσουν την πολυπλοκότητα ενός αλγορίθμου
• Να συνθέτουν, να οργανώνουν και να προγραμματίζουν βασικές πράξεις σε δεδομένα
όπως εύρεση και ταξινόμηση.
• Να μπορούν να επεξεργάζονται αρχεία κειμένου
• Να μπορούν να επεξεργαστούν αυτόματα πληροφορία από το διαδίκτυο
• Να μπορούν να χρησιμοποιήσουν και να εργαστούν με αποθετήρια κώδικα.</value>
  </data>
  <data name="label72.Text" xml:space="preserve">
    <value>Περιεχόμενο του μαθήματος :

Εισαγωγικά στοιχεία
Παράσταση και κωδικοποίηση δεδομένων
Πράξεις-Άλγεβρα Boole
Βασικές αρχές αλγορίθμων, πολυπλοκότητας και δικτύων
Βασικές αρχές λειτουργικών συστημάτων
Εισαγωγή στον προγραμματισμό: γλώσσες προγραμματισμού, μεταγλώττιση, γλώσσα
μηχανής, κατηγορίες γλωσσών προγραμματισμού.
Βασικές δομές δεδομένων: τύποι δεδομένων, αριθμοί, αλφαριθμητικά, λίστες και πίνακες,
σύνολα, λεξικά
Έλεγχος ροής προγράμματος: συνθήκες, τελεστές σύγκρισης, σύγκριση αλφαριθμητικών και ακολουθιών, boolean τελεστές, εμφωλιασμένες επαναλήψεις.
Συναρτήσεις
Χρήση αρχείων κειμένου για εισαγωγή και έξοδο δεδομένων
Σφάλματα και Εξαιρέσεις
Συλλογή δεδομένων από το διαδίκτυο</value>
  </data>
  <data name="label71.Text" xml:space="preserve">
    <value>Μαθησιακά αποτελέσματα :

Με την επιτυχή ολοκλήρωση αυτού του μαθήματος ο φοιτητής θα είναι σε θέση να:
10. Χρησιμοποιεί ολοκληρωμένα περιβάλλοντα ανάπτυξης λογισμικού
11. Παράγει εφαρμογές με αποδοτικό και ταχύ ρυθμό
12. Γνωρίζει τις βασικές αρχές της γλώσσας C#
13. Κάνει αποσφαλμάτωση λογισμικού με τα πλέον σύγχρονα εργαλεία
14. Αναπτύσσει λογισμικό για ένα μεγάλο πλήθος από πεδία, συμπεριλαμβανομένων των παραθυρικών εφαρμογών, των εφαρμογών κονσόλας, των εφαρμογών web και των mobile
εφαρμογών
15. Εκτίθεται σε σύγχρονες τεχνικές προγραμματισμού με στόχο την ποιότητα του παραγόμενου λογισμικού, καθώς και την ταχύτητα ανάπτυξης σύνθετων και πολύπλοκων προγραμμάτων/έργων
16. Μαθαίνει να αξιολογεί και να εντοπίζει λογισμικό υλοποιημένο με εργαλεία οπτικού προγραμματισμού</value>
  </data>
  <data name="label69.Text" xml:space="preserve">
    <value>Περιεχόμενο του μαθήματος :

Αντικείμενο του μαθήματος είναι η ανάπτυξη εφαρμογών βάσει του αντικειμενοστρεφούς
μοντέλου ανάπτυξης λογισμικού. Η γλώσσα προγραμματισμού που χρησιμοποιείται ως βάση είναι η C#, που θεωρείται από τις πλέον σύγχρονες αντικειμενοστρεφείς γλώσσες. Στο
πλαίσιο του μαθήματος δίνεται ιδιαίτερη έμφαση στα εργαλεία ανάπτυξης εφαρμογών,
ολοκληρωμένα περιβάλλοντα ανάπτυξης (IDEs) και συγκεκριμένα το εργαλείο που χρησιμοποιείται είναι το Visual Studio Enterprise Edition. Με τη χρήση του Visual Studio και της
C# ως γλώσσας προγραμματισμού, οι φοιτητές μαθαίνουν να αναπτύσσουν desktop, web,
ή/και mobile εφαρμογές, γρήγορα, αποδοτικά και κυρίως με την όσο το δυνατόν μικρότερη
πιθανότητα να κάνουν λάθη προγραμματισμού ή/και λογικής.</value>
  </data>
  <data name="label68.Text" xml:space="preserve">
    <value>Μαθησιακά αποτελέσματα 

Με την επιτυχή ολοκλήρωση αυτού του μαθήματος οι φοιτητές θα είναι σε θέση να:
1. Να γνωρίζουν τις βασικές αρχές που διέπουν τον αντικειμενοστρεφή προγραμματισμό
2. Να υλοποιούν αντικειμενοστρεφή προγράμματα
3. Να σχεδιάζουν, να αναπτύσσουν και να υλοποιούν λογισμικό ως λύσεις σε προβλήματα,
αποτελούμενο από αντικείμενα και αλλληλεπιδράσεις αυτών
4. Δημιουργούν τάξεις, διεπαφές και αντικείμενα
5. Χρησιμοποιούν σωστά τους modifiers της γλώσσας Java
6. Διαχειρίζονται αποτελεσματικά και με χρήση των κατάλληλων εργαλείων τις εξαιρέσεις που
ανακύπτουν
7. Χειρίζονται αρχεία προορισμένα για ανάγνωση και αποθήκευση δεδομένων
8. Συμβαδίζουν με τις εναλασσόμενες τεχνολογικές απαιτήσεις καθώς εκτίθενται σε σύγχρονες τεχνικές προγραμματισμού με στόχο την ποιότητα του λογισμικού τους
9. Εντοπίζουν, αξιολογούν και αξιοποιούν λογισμικό που υλοποιείται σύμφωνα με τις βασικές αρχές της αντικειμενοστρεφούς σχεδίασης</value>
  </data>
  <data name="label67.Text" xml:space="preserve">
    <value>Περιεχόμενο μαθήματος :

Αντικείμενο του μαθήματος είναι η εισαγωγή στον αντικειμενοστρεφή προγραμματισμό με πλήρη
ανάλυση της γλώσσας προγραμματισμού JAVA. Βασικές δομές, κληρονομικότητα, πολυμορφισμός,
ενθυλάκωση, ειδικές κλάσεις, εξαιρέσεις, ειδικά θέματα, βιβλιοθήκες, διαπροσωπίες, προσπέλαση
αρχείων, access modifiers, non-access modifiers.</value>
  </data>
  <data name="label65.Text" xml:space="preserve">
    <value>Μαθησιακά αποτελέσματα:

Με την ολοκλήρωση του μαθήματος οι φοιτητές/τριες αναμένεται ότι :
1. θα έχουν αποκτήσει τις βασικές γνώσεις σχετικά με τους επιστημονικούς κλάδους της Αλγοριθμικής και του Προγραμματισμού,
2. θα έχουν κατανοήσει τις βασικές αρχές προγραμματισμού ενός Η/Υ,
3. θα αναγνωρίζουν και θα κατανοούν τα βασικά στοιχεία της γλώσσας προγραμματισμού C++,
4. θα διακρίνουν τις βασικές αρχές του συναρτησιακού και αντικειμενοστρεφούς προγραμματισμού,
5. θα μπορούν να αξιοποιήσουν τις βασικές αλγοριθμικές δομές σε γλώσσα C++
6. θα μπορούν να επιλύουν απλά και σύνθετα υπολογιστικά προβλήματα αξιοποιώντας βασικές
Δομές Δεδομένων,
7. θα μπορούν να εκμεταλλευτούν τα βασικά εργαλεία ανάπτυξης και εκσφαλμάτωσης λογισμικού
σε ένα προγραμματιστικό περιβάλλον, αξιολογώντας κριτικά την καταλληλότητά τους ανάλογα με
τις παραμέτρους του</value>
  </data>
  <data name="label64.Text" xml:space="preserve">
    <value>Περιεχόμενα μαθήματος :

Σύγχρονη Τεχνολογία
Πληροφορική &amp; Εξέλιξη Λογισμικού
Επίλυση Προβλημάτων με Υπολογιστές
Προγραμματισμός σε Παραθυρικό περιβάλλον
Εξέλιξη γλωσσών Προγ/μου
Βασικές Αρχές της C++
Εντολές της C++
Τελεστές και Προεπεξεργαστής C++
Απλή είσοδος/ έξοδος και εφαρμογές προγραμμάτων σε C++</value>
  </data>
  <data name="label62.Text" xml:space="preserve">
    <value>Μαθησιακά αποτελέσματα:

Μετά την επιτυχή ολοκλήρωση του μαθήματος, οι φοιτητές:
✓ Θα κατανοούν θέματα σχετικά με το απαιτούμενο θεωρητικό υπόβαθρο των ΒΔ, όπως το
Σχεσιακό Μοντέλο και η γλώσσα SQL, ως κομβικών συστατικών ενός ΠΣ.
✓ Θα αξιοποιούν τη θεωρητική γνώση για να σχεδιάζουν και να αναλύουν τα δεδομένα ενός
ΠΣ
✓ Θα χρησιμοποιούν τη γλώσσα SQL έχοντας διδαχθεί τη θεωρητικό υπόβαθρο της Σχεσιακής
Άλγεβρας
✓ Θα ενσωματώνουν τις τεχνικές σχεδίασης Σχεσιακών Βάσεων Δεδομένων για την αποτελεσματική κατασκευή και αξιοποίησή τους
✓ Θα διακρίνουν τις λοιπές παραμέτρους για να σχεδιάζουν και να αναπτύσσουν Βάσεις Δεδομένων με διευρυμένες δυνατότητες.
✓ Θα έχουν σφαιρική ενημέρωση, ερευνητική και εμπειρική, για περαιτέρω εξειδίκευση στο
χώρο των ΠΣ και των ΒΔ (επαγγελματικά ή/και ακαδημαϊκά</value>
  </data>
  <data name="label61.Text" xml:space="preserve">
    <value>Γενικές Ικανότητες

Λαμβάνοντας υπόψη τις γενικές ικανότητες που πρέπει να έχει αποκτήσει ο πτυχιούχος (όπως αυτές αναγράφονται στο Παράρτημα Διπλώματος και παρατίθενται ακολούθως) σε ποια / ποιες από αυτές αποσκοπεί το
μάθημα;.
Αναζήτηση, ανάλυση και σύνθεση δεδομένων και
πληροφοριών, με τη χρήση και των απαραίτητων
τεχνολογιών
Προσαρμογή σε νέες καταστάσεις
Λήψη αποφάσεων
Αυτόνομη εργασία
Ομαδική εργασία
Εργασία σε διεθνές περιβάλλον
Εργασία σε διεπιστημονικό περιβάλλον
Παράγωγή νέων ερευνητικών ιδεών
Σχεδιασμός και διαχείριση έργων
Σεβασμός στη διαφορετικότητα και στην πολυπολιτισμικότητα
Σεβασμός στο φυσικό περιβάλλον
Επίδειξη κοινωνικής, επαγγελματικής και ηθικής υπευθυνότητας και ευαισθησίας σε θέματα φύλου
Άσκηση κριτικής και αυτοκριτικής</value>
  </data>
  <data name="label60.Text" xml:space="preserve">
    <value>Το μάθημα προσφέρει γνώσεις σχετικά με τη σχεδίαση και χρήση των Βάσεων Δεδομένων (ΒΔ), οι
οποίες αποτελούν κομβικά συστατικά ενός οποιουδήποτε Πληροφοριακού Συστήματος (ΠΣ). Πιο
συγκεκριμένα περιλαμβάνει:
1. Θεωρητικό υπόβαθρο (Σχεσιακό Μοντέλο, Σχεσιακή Άλγεβρα),
2. Εκμάθηση της γλώσσας SQL (η οποία αποτελεί το de-facto standard των συστημάτων διαχείρισης ΒΔ),
3. Τεχνικές σχεδίασης Σχεσιακών ΒΔ, συμπεριλαμβανομένης της θεωρίας κανονικοποίησης,
4. Εργαστηριακές ασκήσεις σε ένα δημοφιλές σύστημα διαχείρισης ΒΔ (PostgreSQL)</value>
  </data>
  <data name="label58.Text" xml:space="preserve">
    <value>Μαθησιακά αποτελέσματα:
Με την ολοκλήρωση του μαθήματος οι φοιτητές/τριες αναμένεται ότι :
1. θα γνωρίζουν τις βασικές έννοιες της Τεχνητής Νοημοσύνης (ΤΝ) και των Έμπειρων Συστημάτων (ΕΣ),
2. θα μπορούν να αναγνωρίζουν, να περιγράφουν και να αναπαριστούν προβλήματα λογικής,
3. θα αναπτύσσουν αλγόριθμους αναζήτησης λύσης,
4. θα εστιάζουν, θαεμβαθύνουν, θα διακρίνουν και θα καταδεικνύουν τρόπους επίλυσης προβλημάτων με επιλεγμένες μεθόδους τεχνητής νοημοσύνης (πχ. γενετικοί αλγόριθμοι, ασαφή λογική),
5. θα ελέγχουν και θα διαχειρίζονται με συστηματικό τρόπο την Ασάφεια και την Αβεβαιότητα σε
συστήματα κανόνων,
6. θα γνωρίζουν και θα προσδιορίζουν τα σημασιολογικά δίκτυα, καθώς επίσης και θα εφαρμόζουν συμπερασματολογία σε αυτά,
7. θα κατέχουν βασικές γνώσεις στη Μηχανική Μάθηση και στα Νευρωνικά Δίκτυα.</value>
  </data>
  <data name="label57.Text" xml:space="preserve">
    <value> Περιεχόμενα μαθήματος :

 Εισαγωγικές γνώσεις βασικών εννοιών στην Τεχνητή Νοημοσύνη και τα ‘Εμπειρα Συστήματα
 Επίλυση προβλημάτων σε επιλεγμένες περιοχές, όπως για παράδειγμα οι γενετικοί αλγόριθμοι
 με μεθόδους τεχνητής νοημοσύνης
 Βασικές γνώσεις στη Μηχανική Μάθηση και στα Νευρωνικά Δίκτυα </value>
  </data>
  <data name="label55.Text" xml:space="preserve">
    <value>Μαθησιακά αποτελέσματα:

Με την επιτυχή́ολοκλήρωση του μαθήματος ο φοιτητής θα είναι σε θέση:
• Να διαθέτει προχωρημένες γνώσεις σε αλγορίθμους, τεχνικές και μεθοδολογίες αναγνώρισης
προτύπων, όπως στην Μπεϋζιανή θεωρία ταξινόμησης, σε γραμμικούς και μη γραμμικούς ταξινομητές, σε Νευρωνικά δίκτυα, σε Κρυφά Μοντέλα Markov, σε αλγορίθμους ομαδοποίησης και
τεχνικές επιλογής χαρακτηριστικών και μείωσης αριθμού διαστάσεων δεδομένων.
• Να αντιλαμβάνεται πώς συνδυάζονται γνώσεις πιθανοτήτων, στατιστικής, γραμμικής άλγεβρας
και βελτιστοποίησης για τη δημιουργία αλγορίθμων αναγνώρισης προτύπων.
• Να αναλύει προβλήματα πραγματικών δεδομένων (ανοικτής πρόσβασης), στα οποία απαιτείται
η σχεδίαση/ανάπτυξη/υλοποίηση συστημάτων ταξινόμησης αντικειμένων.
• Να εκτιμά το εφικτό των προβλημάτων αυτών, να επιλέγει τους κατάλληλους αλγορίθμους/τεχνικές και να προβαίνει στην αποτίμηση και συγκριτική μελέτη των επιδόσεων εναλλακτικών λύσεων.
• Να διαχειρίζεται τον φόρτο και την πολυπλοκότητα τέτοιων προβλημάτων πραγματικών δεδομένων σε περιβάλλον ομαδικής εργασίας.
• Να κατέχει προχωρημένες προγραμματιστικές δεξιότητες σε περιβάλλον ανάπτυξης λογισμικού
Python/MATLAB/GNU Octave για την υλοποίηση αλγορίθμων, τεχνικών και μεθόδων ταξινόμησης αντικειμένων.
• Να εκτιμά και να επαναχρησιμοποιεί υφιστάμενες υλοποιήσεις συναρτήσεων ανοιχτού κώδικα,
σχετικών με το πεδίο της αναγνώρισης προτύπων, όπως των συναρτήσεων της βιβλιοθήκης
scikit-learn.
• Να διακρίνει έννοιες συναφείς της αναγνώρισης προτύπων, στα συγγενή επιστημονικά πεδία
της Μηχανικής Μάθησης, της Ανάλυσης Δεδομένων και της Τεχνητής Νοημοσύνης. </value>
  </data>
  <data name="label54.Text" xml:space="preserve">
    <value>Αναγνώριση Προτύπων (pattern recognition) είναι η επιστημονική περιοχή που έχει στόχο την ταξινόμηση αντικειμένων σε κατηγορίες (κλάσεις) και συμπεριλαμβάνει το επιστημονικό πεδίο της Μηχανικής Μάθησης (machine learning). Σκοπός, επομένως, του παρόντος μαθήματος είναι να παρουσιάσει με ενιαίο τρόπο τις ευρύτερα χρησιμοποιούμενες τεχνικές και μεθοδολογίες για προβλήματα
αναγνώρισης προτύπων.

Το περιεχόμενο του μαθήματος χωρίζεται σε οκτώ ενότητες και κάθε ενότητα πραγματοποιείται σε
μία ή περισσότερες διαλέξεις.

Ενότητα 1: Εισαγωγή στην Αναγνώριση Προτύπων
Ενότητα 2: Ταξινομητές που βασίζονται στη θεωρία αποφάσεων του Bayes:
Θεωρία Αποφάσεων του Bayes, H Γκαουσσιανή Συνάρτηση Πυκνότητας Πιθανότητας, Ταξινομητές
Ελάχιστης Απόστασης, Ταξινομητής Ευκλείδειας Απόστασης, Ταξινομητής Mahalanobis Απόστασης,
Εκτίμηση Μέγιστης Πιθανοφάνειας των παραμέτρων της Γκαουσσιανής Συνάρτησης Πυκνότητας
Πιθανότητας
Μοντέλα Μίξης, Ο Αλγόριθμος Expectation-Maximization, Παράθυρα Parzen
Εκτίμηση Πυκνότητας Πιθανότητας με βάση τους k-πλησιέστερους γείτονες, Ο Ταξινομητής Naive
Bayes, Ο Ταξινομητής Πλησιέστερων Γειτόνων
Ενότητα 3: Ταξινομητές που βασίζονται στη Βελτιστοποίηση Συνάρτησης Κόστους:
Ο αλγόριθμος Perceptron, H online έκδοση του αλγόριθμου Perceptron, Ταξινομητής Ελάχιστου Τετραγωνικού Σφάλματος, Περίπτωση πολλών κλάσεων, Μηχανές Διανυσματικής Στήριξης
(ΜΔΣ/SVM): Η γραμμική περίπτωση, Επεκτάσεις για την περίπτωση πολλών κλάσεων, SVM: Η μη
γραμμική περίπτωση, Ο Αλγόριθμος Perceptron με χρήση Πυρήνων, O Αλγόριθμος AdaBoost, Πολυστρωματικά Δίκτυα Perceptrons</value>
  </data>
  <data name="label52.Text" xml:space="preserve">
    <value>Μαθησιακά αποτελέσματα:

Με την ολοκλήρωση του μαθήματος οι φοιτητές/τριες θα είναι σε θέση:
• Να γνωρίζουν, να κατανοούν και να εξηγούν τις αρχές του σχεδιασμού ενός συστήματος
διεπαφής.
• Να σχεδιάζουν εύχρηστα συστήματα διεπαφής με τους χρήστες για οποιαδήποτε εφαρμογή.
• Να υλοποιούν συστήματα διεπαφής με τους χρήστες σε κάποια οπτική γλώσσα προγραμματισμού.
• Να αξιολογούν την ευχρηστία των συστημάτων διεπαφής που έχουν αναπτυχθεί από άλλους.
• Να προσδιορίζουν τις δυνατότητες και ικανότητες που μπορεί κανείς να περιμένει από τους
ανθρώπους χρήστες για σχεδιασμό βελτιωμένων, μελλοντικών αλληλεπιδραστικών συστημάτων.
• Να κατανοούν και να ταξινομούν εργασίες ιεραρχικά
• Να εφαρμόζουν την ιεραρχική ανάλυση εργασιών.
• Να αντιλαμβάνονται τη σημαντικότητα της ύπαρξης βοήθειας σε ένα αλληλεπιδραστικό
σύστημα διεπαφής.
• Να αναγνωρίζουν τις μορφές βοήθειας που μπορεί να παρέχεται σε ένα αλληλεπιδραστικό
σύστημα διεπαφής.
• Να σχεδιάζουν και να αναπτύσσουν εύχρηστη βοήθεια σε ένα αλληλεπιδραστικό σύστημα
διεπαφής.
• Να αναγνωρίζουν τα διάφορα εγχειρίδια χρήσης που συνοδεύουν ένα αλληλεπιδραστικό
λογισμικό.
• Να αναλύουν και να συνθέτουν ευκρινείς οδηγίες χρήσης σε αλλλεπιδραστικά λογισμικά .
• Να συντάσσουν, με βάση τα παραπάνω, τα απαραίτητα εγχειρίδια χρήσης που συνοδεύουν
ένα αλληλεπιδραστικό λογισμικό.
• Να γνωρίζουν, κατανοούν και εξηγούν θεωρητικά μοντέλα αλληλεπίδρασης.
• Να κατανοούν και να υλοποιούν τα στάδια του μοντέλου του Norman.
• Να αναλύουν εναλλακτικούς τρόπους σχεδιασμού αλληλεπιδράσεων ενός συστήματος διεπαφής σύμφωνα με το μοντέλο του Νόρμαν.
• Να προτείνουν και να αξιολογούν εναλλακτικούς τρόπους σχεδιασμού αλληλεπιδράσεων
ενός συστήματος διεπαφής.
</value>
  </data>
  <data name="label50.Text" xml:space="preserve">
    <value>Βασικά περιεχόμενο μαθήματος:
• Σχεδιασμός του συστήματος διεπαφής με τον χρήστη.
• Η ανθρώπινη πλευρά στην αλληλεπίδραση.
• Κλασσικά και σύγχρονα μέσα επικοινωνίας του υπολογιστή.
• Μοντέλα αλληλεπίδρασης και μοντέλα για τον χρήστη.
• Στόχοι, μέθοδοι, ανάλυση εργασιών.
• Χρηστικότητα, φιλικότητα λογισμικού.

</value>
  </data>
  <data name="label21.Text" xml:space="preserve">
    <value>Μαθησιακά αποτελέσματα

Με την επιτυχή ολοκλήρωση αυτού του μαθήματος ο φοιτητής θα είναι σε θέση να:
1. Συντάσσει δομημένα έγγραφα ανάλυσης απαιτήσεων λογισμικού
2. Σχεδιάζει αρχιτεκτονικά σχέδια λογισμικού βασισμένα σε γλώσσες μοντελοποίησης και
διαγράμματα
3. Παράγει κώδικα βασισμένο στο στάδιο του σχεδιασμού, ο οποίος θα ανταποκρίνεται στα
αντίστοιχα διαγράμματα
4. Χρησιμοποιεί το μοντέλο κύκλου ζωής λογισμικού Rational Unified Process</value>
  </data>
  <data name="label19.Text" xml:space="preserve">
    <value>Αναζήτηση, ανάλυση και σύνθεση δεδομένων και πληροφοριών, με τη χρήση και των απαραίτητων τεχνολογιών
• Αυτόνομη εργασία
• Ομαδική εργασία
• Σχεδιασμός και διαχείριση έργων
• Προσαρμογή σε νέες καταστάσεις
• Προαγωγή της δημιουργικής και επαγωγικής σκέψης
• Παραγωγή νέων ερευνητικών ιδεών στο συγκεκριμένο πεδίο
• Εργασία σε διεπιστημονικό περιβάλλον
</value>
  </data>
  <data name="label15.Text" xml:space="preserve">
    <value>Γενικές Ικανότητες:

Λαμβάνοντας υπόψη τις γενικές ικανότητες που πρέπει να έχει αποκτήσει ο πτυχιούχος (όπως αυτές αναγράφονται στο Παράρτημα Διπλώματος 
και παρατίθενται ακολούθως) σε ποια / ποιες από αυτές αποσκοπεί το μάθημα;.
Αναζήτηση, ανάλυση και σύνθεση δεδομένων και πληροφοριών, με τη χρήση και των απαραίτητων τεχνολογιών
Προσαρμογή σε νέες καταστάσεις
Λήψη αποφάσεων
Αυτόνομη εργασία
Ομαδική εργασία
Εργασία σε διεθνές περιβάλλον
Εργασία σε διεπιστημονικό περιβάλλον
Παράγωγή νέων ερευνητικών ιδεών</value>
  </data>
  <data name="label18.Text" xml:space="preserve">
    <value>Περιεχόμενο μαθήματος:

Οι φοιτητές εκτίθενται σε σύγχρονες τεχνικές μοντελοποίησης λογισμικού, στον αρχιτεκτονικό σχεδιασμό και στη σύγχρονη γλώσσα μοντελοποίησης UML
1. Μοντέλα κύκλου ζωής λογισμικού με έμφαση στη Rational Unified Process,
2. Γλώσσες μοντελοποίησης με έμφαση στη UML,
3. Προϋπολογισμός κόστους λογισμικού,
4. Ανάλυση απαιτήσεων, σχεδιασμός, υλοποίηση και γλώσσες προγραμματισμού,
5. Έλεγχος, συντήρηση και εργαλεία CASE.</value>
  </data>
  <data name="label5.Text" xml:space="preserve">
    <value>Παρακάτω ακολουθεί μία λίστα βασικών μαθημάτων πληροφορικής:

• Τεχνολογία Λογισμικού
• Σύγχρονα θέματα Τεχνολογίας Λογισμικού και κινητών τηλεφώνων
• Αλληλεπίδραση Ανθρώπου Υπολογιστή
• Αναγνώριση Προτύπων
• Τεχνητή Νοημοσύνη
• Βάσεις Δεδομένων
• C /C++
• JAVA
• C#
• PYTHON</value>
  </data>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
</root>